// Generated by @wagmi/cli@1.0.0 on 11/05/2023 at 00:24:31
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hamm
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hammABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_tipReceiverAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'piggyBankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PiggyBankCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'piggyBankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PiggyBankWithdrawed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'piggyBankId', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawerAddress', internalType: 'address', type: 'address' },
    ],
    name: 'changeWithdrawer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'beneficiaryAddress', internalType: 'address', type: 'address' },
      { name: 'withdrawerAddress', internalType: 'address', type: 'address' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'description', internalType: 'string', type: 'string' },
      {
        name: 'tokenContractAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'createNewPiggyBank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'description', internalType: 'string', type: 'string' },
      {
        name: 'tokenContractAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'createNewPiggyBankForSender',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'piggyBankId', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositPiggyBank',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'piggyBankId', internalType: 'uint256', type: 'uint256' }],
    name: 'getPiggyBankById',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'description', internalType: 'string', type: 'string' },
      {
        name: 'tokenContractAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'beneficiaryAddress', internalType: 'address', type: 'address' },
      { name: 'withdrawerAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'beneficiaryAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getPiggyBankIdsForAddress',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPiggyBanksIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'piggyBankId', internalType: 'uint256', type: 'uint256' },
      { name: 'tip', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawalPiggyBank',
    outputs: [{ name: 'transfer', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__.
 */
export function useHammRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: hammABI, ...config } as UseContractReadConfig<
    typeof hammABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useHammBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"getApproved"`.
 */
export function useHammGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"getPiggyBankById"`.
 */
export function useHammGetPiggyBankById<
  TFunctionName extends 'getPiggyBankById',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'getPiggyBankById',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"getPiggyBankIdsForAddress"`.
 */
export function useHammGetPiggyBankIdsForAddress<
  TFunctionName extends 'getPiggyBankIdsForAddress',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'getPiggyBankIdsForAddress',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"getPiggyBanksIds"`.
 */
export function useHammGetPiggyBanksIds<
  TFunctionName extends 'getPiggyBanksIds',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'getPiggyBanksIds',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useHammIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"name"`.
 */
export function useHammName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useHammOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useHammSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"symbol"`.
 */
export function useHammSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useHammTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof hammABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hammABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof hammABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__.
 */
export function useHammWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hammABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof hammABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, TFunctionName, TMode>({
    abi: hammABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"approve"`.
 */
export function useHammApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hammABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof hammABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'approve', TMode>({
    abi: hammABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"changeWithdrawer"`.
 */
export function useHammChangeWithdrawer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hammABI,
          'changeWithdrawer'
        >['request']['abi'],
        'changeWithdrawer',
        TMode
      > & { functionName?: 'changeWithdrawer' }
    : UseContractWriteConfig<typeof hammABI, 'changeWithdrawer', TMode> & {
        abi?: never
        functionName?: 'changeWithdrawer'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'changeWithdrawer', TMode>({
    abi: hammABI,
    functionName: 'changeWithdrawer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"createNewPiggyBank"`.
 */
export function useHammCreateNewPiggyBank<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hammABI,
          'createNewPiggyBank'
        >['request']['abi'],
        'createNewPiggyBank',
        TMode
      > & { functionName?: 'createNewPiggyBank' }
    : UseContractWriteConfig<typeof hammABI, 'createNewPiggyBank', TMode> & {
        abi?: never
        functionName?: 'createNewPiggyBank'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'createNewPiggyBank', TMode>({
    abi: hammABI,
    functionName: 'createNewPiggyBank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"createNewPiggyBankForSender"`.
 */
export function useHammCreateNewPiggyBankForSender<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hammABI,
          'createNewPiggyBankForSender'
        >['request']['abi'],
        'createNewPiggyBankForSender',
        TMode
      > & { functionName?: 'createNewPiggyBankForSender' }
    : UseContractWriteConfig<
        typeof hammABI,
        'createNewPiggyBankForSender',
        TMode
      > & {
        abi?: never
        functionName?: 'createNewPiggyBankForSender'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'createNewPiggyBankForSender', TMode>(
    {
      abi: hammABI,
      functionName: 'createNewPiggyBankForSender',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"depositPiggyBank"`.
 */
export function useHammDepositPiggyBank<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hammABI,
          'depositPiggyBank'
        >['request']['abi'],
        'depositPiggyBank',
        TMode
      > & { functionName?: 'depositPiggyBank' }
    : UseContractWriteConfig<typeof hammABI, 'depositPiggyBank', TMode> & {
        abi?: never
        functionName?: 'depositPiggyBank'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'depositPiggyBank', TMode>({
    abi: hammABI,
    functionName: 'depositPiggyBank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useHammSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hammABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof hammABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'safeTransferFrom', TMode>({
    abi: hammABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useHammSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hammABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof hammABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'setApprovalForAll', TMode>({
    abi: hammABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useHammTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hammABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof hammABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'transferFrom', TMode>({
    abi: hammABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"withdrawalPiggyBank"`.
 */
export function useHammWithdrawalPiggyBank<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hammABI,
          'withdrawalPiggyBank'
        >['request']['abi'],
        'withdrawalPiggyBank',
        TMode
      > & { functionName?: 'withdrawalPiggyBank' }
    : UseContractWriteConfig<typeof hammABI, 'withdrawalPiggyBank', TMode> & {
        abi?: never
        functionName?: 'withdrawalPiggyBank'
      } = {} as any,
) {
  return useContractWrite<typeof hammABI, 'withdrawalPiggyBank', TMode>({
    abi: hammABI,
    functionName: 'withdrawalPiggyBank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__.
 */
export function usePrepareHammWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareHammApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"changeWithdrawer"`.
 */
export function usePrepareHammChangeWithdrawer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, 'changeWithdrawer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'changeWithdrawer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, 'changeWithdrawer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"createNewPiggyBank"`.
 */
export function usePrepareHammCreateNewPiggyBank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, 'createNewPiggyBank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'createNewPiggyBank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, 'createNewPiggyBank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"createNewPiggyBankForSender"`.
 */
export function usePrepareHammCreateNewPiggyBankForSender(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hammABI,
      'createNewPiggyBankForSender'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'createNewPiggyBankForSender',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof hammABI,
    'createNewPiggyBankForSender'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"depositPiggyBank"`.
 */
export function usePrepareHammDepositPiggyBank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, 'depositPiggyBank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'depositPiggyBank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, 'depositPiggyBank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareHammSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareHammSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareHammTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hammABI}__ and `functionName` set to `"withdrawalPiggyBank"`.
 */
export function usePrepareHammWithdrawalPiggyBank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hammABI, 'withdrawalPiggyBank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hammABI,
    functionName: 'withdrawalPiggyBank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hammABI, 'withdrawalPiggyBank'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hammABI}__.
 */
export function useHammEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hammABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: hammABI, ...config } as UseContractEventConfig<
    typeof hammABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hammABI}__ and `eventName` set to `"Approval"`.
 */
export function useHammApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof hammABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hammABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof hammABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hammABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useHammApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof hammABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hammABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof hammABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hammABI}__ and `eventName` set to `"PiggyBankCreated"`.
 */
export function useHammPiggyBankCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof hammABI, 'PiggyBankCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hammABI,
    eventName: 'PiggyBankCreated',
    ...config,
  } as UseContractEventConfig<typeof hammABI, 'PiggyBankCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hammABI}__ and `eventName` set to `"PiggyBankWithdrawed"`.
 */
export function useHammPiggyBankWithdrawedEvent(
  config: Omit<
    UseContractEventConfig<typeof hammABI, 'PiggyBankWithdrawed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hammABI,
    eventName: 'PiggyBankWithdrawed',
    ...config,
  } as UseContractEventConfig<typeof hammABI, 'PiggyBankWithdrawed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hammABI}__ and `eventName` set to `"Transfer"`.
 */
export function useHammTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof hammABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hammABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof hammABI, 'Transfer'>)
}
